#!/usr/bin/env python

import daemon
import fcntl
import sys, os
import signal
import syslog

class PidFile(object):
    """Context manager that locks a pid file.  Implemented as class
    not generator because daemon.py is calling .__exit__() with no parameters
    instead of the None, None, None specified by PEP-343."""
    # pylint: disable=R0903

    def __init__(self, path):
        self.path = path
        self.pidfile = None

    def __enter__(self):
        self.pidfile = open(self.path, "a+")
        try:
            fcntl.flock(self.pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            raise SystemExit("Already running according to " + self.path)
        self.pidfile.seek(0)
        self.pidfile.truncate()
        self.pidfile.write(str(os.getpid()))
        self.pidfile.flush()
        self.pidfile.seek(0)
        return self.pidfile

    def __exit__(self, exc_type=None, exc_value=None, exc_tb=None):
        try:
            self.pidfile.close()
        except IOError as err:
            # ok if file was just closed elsewhere
            if err.errno != 9:
                raise
        os.remove(self.path)

detach = (sys.argv[1] == '-d' if len(sys.argv) > 1 else False)

with daemon.DaemonContext(detach_process=detach, pidfile=PidFile("/var/run/boot-splash.pid")):
                          #, signal_map={signal.SIGTERM: stopping}):                          
    import socket
    import struct
    import time
    import setproctitle
    from traceback import print_exc, format_exc
    from sense_hat import SenseHat
    import smbus
    try:
        from openvpn_status import parse_status
    except:
        parse_status = None

    rainbow = [
        [255, 0, 0], [255, 0, 0], [255, 87, 0], [255, 196, 0], [205, 255, 0], [95, 255, 0], [0, 255, 13], [0, 255, 122],
        [255, 0, 0], [255, 96, 0], [255, 205, 0], [196, 255, 0], [87, 255, 0], [0, 255, 22], [0, 255, 131], [0, 255, 240],
        [255, 105, 0], [255, 214, 0], [187, 255, 0], [78, 255, 0], [0, 255, 30], [0, 255, 140], [0, 255, 248], [0, 152, 255],
        [255, 223, 0], [178, 255, 0], [70, 255, 0], [0, 255, 40], [0, 255, 148], [0, 253, 255], [0, 144, 255], [0, 34, 255],
        [170, 255, 0], [61, 255, 0], [0, 255, 48], [0, 255, 157], [0, 243, 255], [0, 134, 255], [0, 26, 255], [83, 0, 255],
        [52, 255, 0], [0, 255, 57], [0, 255, 166], [0, 235, 255], [0, 126, 255], [0, 17, 255], [92, 0, 255], [201, 0, 255],
        [0, 255, 66], [0, 255, 174], [0, 226, 255], [0, 117, 255], [0, 8, 255], [100, 0, 255], [210, 0, 255], [255, 0, 192],
        [0, 255, 183], [0, 217, 255], [0, 109, 255], [0, 0, 255], [110, 0, 255], [218, 0, 255], [255, 0, 183], [255, 0, 74]
    ]

    def get_ip_address(ifname):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        return socket.inet_ntoa(fcntl.ioctl(
            s.fileno(),
            0x8915,  # SIOCGIFADDR
            struct.pack('256s', ifname[:15])
        )[20:24])

    def paused(pause_file='/tmp/boot-splash.pause'):
        try:
            s = os.stat(pause_file)
            return True
        except OSError:
            return False

    def shaking(samples=2):
        for i in range(samples):
            mins = sense.gyro
            maxs = sense.gyro
            for sample in range(7):
                g = sense.gyro
                for k, v in g.items():
                    mins[k] = min(mins[k], v)
                    maxs[k] = max(maxs[k], v)
            ranges = dict()
            for k in mins.keys():
                if abs(mins[k] - maxs[k]) > 350:
                    ranges[k] = 360 - abs(mins[k] - maxs[k])
                else:
                    ranges[k] = abs(mins[k] - maxs[k])
            if not any([v > 11 for k, v in ranges.items()]):
                return False
        return True

    def setcolour():
        if sense:
            if hostcolour in colours:
                sense.clear(colours[hostcolour])
            else:
                sense.set_pixels(rainbow)

    def pwr_mode(i2c, return_on_battery=False):
       data = i2c.read_byte_data(0x69, 0x00)
       data = data & ~(1 << 7)
       if (data == 1):
           if return_on_battery:
               return False
           else:
               return "Powered"
       elif (data == 2):
           if return_on_battery:
               return True
           else:
               return "Battery"
       else:
           if return_on_battery:
               return False
           else:
               return "Error"

    def bat_level(i2c):
       time.sleep(0.1)
       data = i2c.read_word_data(0x69, 0x01)
       data = format(data,"x")
       return (float(data) / 100)

    def get_identity(i2c):
        global hostname, hostcolour, ip, ups_mode, ups_bat

        try:
            hostname = socket.gethostname()
            hostcolour = hostname.split('-', 1)[1]
        except:
            hostname = 'unknown'
            hostcolour = 'unknown'

        try:
            ip = get_ip_address('wlan0')
        except:
            try:
                ip = get_ip_address('eth0')
            except:
                ip = 'unknown'

        try:
            ups_mode = pwr_mode(i2c)
        except:
            ups_mode = 'unknown'
 
        try:
            ups_bat = bat_level(i2c)
        except:
            ups_bat = 'unknown'

    def show_identity():
        id = '{} : {} : {}/{}V'.format(hostname, ip, ups_mode, ups_bat)
        if sense:
            sense.show_message(id, scroll_speed=0.04)
        syslog.syslog('Identity = {}'.format(id))
        setcolour()

    sense = None
    hostname = None
    hostcolour = None
    ip = None
    ups_mode = None
    ups_bat = None

    i2c = smbus.SMBus(1)
    get_identity(i2c)
    show_identity()

    try:
        setproctitle.setproctitle(' '.join(sys.argv))

        colours = { 'black': (0, 0, 0),
                    'white': (180, 180, 180),
                    'red':   (224, 0, 0),
                    'green': (0, 224, 0),
                    'blue':  (0, 0, 224),
                    'dmz':  (0, 0, 224),
                    'yellow': (244, 244, 0) }

        syslog.syslog('starting on {} node'.format(hostname))

        path = [ (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), 
                 (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7),
                 (6, 7), (5, 7), (4, 7), (3, 7), (2, 7), (1, 7), (0, 7),
                 (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1) ]

        center = [ (3, 3), (4, 3), (3, 4), (4, 4) ]

        box = [ (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6),
                (2, 1),                                 (2, 6),
                (3, 1),                                 (3, 6),
                (4, 1),                                 (4, 6),
                (5, 1),                                 (5, 6),
                (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6) ]

        waspaused = paused()
        if waspaused:
            syslog.syslog('paused')

        while True:
            while paused():
                time.sleep(1)
                waspaused = True

            if waspaused:
                syslog.syslog('unpaused')
                waspaused = False

            sense = SenseHat()
            sense.low_light = True
            sense.set_rotation(180)

            setcolour()
            time.sleep(1)

            snake = [(0, 1.4), (-1, 0.9), (-2, 0.4), (-3, 0.1), (-4, 0)]

            while True:
                for i, segpower in enumerate(snake):
                    seg, power = segpower
                    if seg >= 0:
                        p = path[seg]
                        sense.set_pixel(p[0], p[1], map(lambda c: int(c * power), colours['white']))
                    seg += 1
                    if seg == len(path):
                        seg = 0
                    snake[i] = (seg, power)
                if shaking():
                    get_identity(i2c)
                    show_identity()
                if paused():
                    syslog.syslog('paused')
                    waspaused = True
                    sense.clear()
                    break

                # Synchronise snakes, check UPS and OpenVPN status
                if snake[0][0] == 0:
                    on_battery = pwr_mode(i2c, return_on_battery=True)
                    for p in center:
                        if on_battery:
                            sense.set_pixel(p[0], p[1], colours['yellow'])
                        else:
                            if hostcolour in colours:
                                sense.set_pixel(p[0], p[1], colours[hostcolour])
                            else:
                                sense.set_pixel(p[0], p[1], rainbow[(p[1] * 8) + p[0]])

                    if parse_status and os.path.exists('/var/log/openvpn-status.log'):
                        with open('/var/log/openvpn-status.log') as logfile:
                            status = parse_status(logfile.read())
                        for p in box:
                            if len(status.client_list) > 0:
                                sense.set_pixel(p[0], p[1], colours['red'])
                            else:
                                if hostcolour in colours:
                                    sense.set_pixel(p[0], p[1], colours[hostcolour])
                                else:
                                    sense.set_pixel(p[0], p[1], rainbow[(p[1] * 8) + p[0]])

                    while int(time.time() % 5) != 0:
                        time.sleep(0.1)
    except SystemExit:
        syslog.syslog('stopping')
    except:
        syslog.syslog(syslog.LOG_ERR, 'error: {}'.format(format_exc()))
    if sense is not None:
        sense.clear()

